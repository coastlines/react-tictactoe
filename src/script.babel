function Square(props) {
  return (
    <button className="square" onClick={props.onClick}>
      {props.value}
     </button>
  );
}

class Board extends React.Component {
  renderSquare(i) {
    return (
      <Square
        value={this.props.squares[i]} 
        onClick={() => this.props.onClick(i)} 
       />
      );
  }

  render() {
    return (
      <div>
        <div className="board-row">
          {this.renderSquare(0)}
          {this.renderSquare(1)}
          {this.renderSquare(2)}
        </div>
        <div className="board-row">
          {this.renderSquare(3)}
          {this.renderSquare(4)}
          {this.renderSquare(5)}
        </div>
        <div className="board-row">
          {this.renderSquare(6)}
          {this.renderSquare(7)}
          {this.renderSquare(8)}
        </div>
      </div>
    );
  }
}

class Game extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      history: [
        {
        squares: Array(9).fill(null),
        }
      ],
      stepNumber: 0,
      xIsNext: true,
      color: "aquamarine",
      fontWeight: ""
    };
  }
  
   handleClick(i) {
     const history = this.state.history.slice(0,this.state.stepNumber + 1);
     const current = history[history.length - 1];
    // Note how in handleClick, we call .slice() to create a copy of the squares array to modify instead of mutating the existing array.
    const squares = current.squares.slice();
    // let the handleClick function return early by ignoring a click if someone has won the game or if a square is already filled
    if (calculateWinner(squares) || squares[i]) {
        return;
        }
    squares[i] = this.state.xIsNext ? 'X' : 'O';
    // The Square components receive values from the Board component and inform the Board component when they’re clicked. 
    // In React terms, the Square components are controlled components. The Board has full control over them.
    this.setState({
      history: history.concat([
        {
        squares: squares
        }
      ]),
      stepNumber: history.length,
      xIsNext: !this.state.xIsNext,
    });
  }
  
  jumpTo = (step) => {
    this.setState({
      stepNumber: step,
      xIsNext: (step % 2) === 0,
      selected: step,
    });    
  }
  
  render() {
    // Update the Game component’s render function to use the most recent history entry to determine and display the game’s status
    const history = this.state.history;
    const current = history[this.state.stepNumber];
    const winner = calculateWinner(current.squares);
   
    const moves = history.map((step, move) => {
      const desc = move ? 
            'Go to move #' + move:
            'Go to game start';

      return (
        <li key={move}>
            <button style={{
              backgroundColor: this.state.selected === move ? "pink" : this.state.color,
              fontWeight: this.state.selected === move ? "bold" : this.state.fontWeight,
            }} 
              onClick={() => this.jumpTo(move)}
            >
              {desc}
            </button>
        </li>
      );
    });
    
    let status;
    if (winner) {
      status = "Winner: " + winner;
    } else {
      status = "Next player: " + (this.state.xIsNext ? "X" : "O");
    }
    
    return (
      <div className="game">
        <div className="game-board">
          <Board 
            squares={current.squares}
            onClick={i => this.handleClick(i)}
            />
        </div>
        <div className="game-info">
          <div>{status}</div>
          <ol>{moves}</ol>
        </div>
      </div>
    ); 

      // console.log(winner)
      // let results = winner.slice(3,8)
      // console.log(Array.from(results))
      // if (document.getElementsByClassName('square') === true) {
      //   document.getElementsByClassName('squareWinner')
      // }

  }
}


// ========================================

ReactDOM.render(<Game />, document.getElementById('root'));

function calculateWinner(squares) {
  const lines = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8],
    [2, 4, 6],
  ];
  
  for (let i = 0; i < lines.length; i++) {
    let winningLine;
    const [a, b, c] = lines[i];
    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {
      winningLine = lines[i];
      return `${squares[a]} (${winningLine})`;
    }
  }
  return null;
}

// TO DO
// Display the location for each move in the format (col, row) in the move history list.
// Bold the currently selected item in the move list.
// Rewrite Board to use two loops to make the squares instead of hardcoding them.
// Add a toggle button that lets you sort the moves in either ascending or descending order.
// When someone wins, highlight the three squares that caused the win.
// When no one wins, display a message about the result being a draw.
